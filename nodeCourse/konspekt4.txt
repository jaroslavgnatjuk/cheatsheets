process.on('unhandeledRejection', () => {
	обработка ошибок возникших в промисах и не обработанных
});

yield Promise
yield asyncFunc(callback)
yield* <generator>

koa-logger

let fileStream;
while (fileStream = yield parser) {
	//работаем с потоком файла
}

this.throw бросает шттп ошибку

пример медлвэр для обработки ошибок:
module.exports = function*(next) {
 
  try {
    yield* next;
  } catch (e) {
    if (e.status) {
      // could use template methods to render error page
      this.body = e.message;
      this.status = e.status;
    } else {
      this.body = 'Error 500';
      this.status = 500;
      console.error(e.message, e.stack);
    }
 
  }
}

app.keys = [config.secret] - для подписанных кук
ставится доп.кука, например
money: 100 обычная кука
money.sig: MD5(100, secret) подписанная кука, только сервер может ее открыть
на основании секрета, если юзер вручную поменяет куку со 100 на 1000, то сервер
получив куку увидет несоответствие, подпись изменится
Делается это для того, чтобы хранить значения у юзера и при этом мы точно знаем что юзер их не менял.

let session = require('koa-generic-session')

пример обработки мультипарт формы (формы и файлы)
// recieve multipart/form
// without files
 
// for routes which require custom file handling
// can introduce config to ignore them here
 
const busboy = require('co-busboy');
 
 
module.exports = function* (next) {
  // the body isn't multipart, so busboy can't parse it
  if (!this.request.is('multipart/*')) {
    return yield* next;
  }
 
 //все обычные поля мультиформы записываем в обьект parser
 //parser.fields.value ...
  const parser = busboy(this, {
    autoFields: true
  });
   
  let fileStream;
 
  while (fileStream = yield parser) {
    // autoFields => part is a file
    // specific handlers know how to handle the file, not us
    // alt: can auto-save to disk
    //в данном случае выбрасываем ошибку, но можно было бы работать с фотоком файла
    this.throw(400, "Files are not allowed here");
  }
 
  // copy normal fields from parser to this.request.body
  const body = this.request.body;
 
  for (let [name, val, fieldnameTruncated, valTruncated] of parser.fields) {
    if (body[name]) { // same value already exists
      if (!Array.isArray(body[name])) { //  convert to array
        body[name] = [body[name]];
      }
      body[name].push(val);
    } else {
      body[name] = val;
    }
  }
 
  yield* next;
};

let Router = require('koa-router');

let router = new Router({
	prefix: '/users'
});

router.get('/views', function* ....) ///user/views

koa-mount 
app.use(mount('/hello', hello))
